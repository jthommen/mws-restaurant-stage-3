let restaurants,neighborhoods,cuisines,map,observer,mapLoaded=!1,markers=[];function onIntersection(e){e.forEach(e=>{e.intersectionRatio>0&&(observer.unobserve(e.target),e.target.getAttribute("data-src")&&e.target.setAttribute("src",e.target.getAttribute("data-src")))})}document.addEventListener("DOMContentLoaded",e=>{document.getElementById("map").addEventListener("click",initMap),document.getElementById("cuisines-select").addEventListener("change",e=>{mapLoaded||initMap()}),document.getElementById("neighborhoods-select").addEventListener("change",e=>{mapLoaded||initMap()}),LocalState.checkforIDBData({name:"restaurants",object_type:"restaurants"},(e,t)=>{console.log("Initial Load finished!"),fetchNeighborhoods(),fetchCuisines(),registerServiceWorker(),updateRestaurants()})}),registerServiceWorker=(()=>{navigator.serviceWorker&&navigator.serviceWorker.register("./service-worker.js").then(()=>{console.log("Service Worker: Registered!")}).catch(e=>{console.log(`Service Worker: Registration failed: ${e}`)})}),fetchNeighborhoods=(()=>{LocalState.getNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const s=document.createElement("option");s.innerHTML=e,s.value=e,t.append(s)})}),fetchCuisines=(()=>{LocalState.getCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const s=document.createElement("option");s.innerHTML=e,s.value=e,t.append(s)})}),initMap=(()=>{self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants(),mapLoaded=!0}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),s=e.selectedIndex,r=t.selectedIndex,a=e[s].value,n=t[r].value;LocalState.getRestaurantByCuisineAndNeighborhood(a,n,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),lazyLoadingObserver=(()=>{const e=document.querySelectorAll(".restaurant-img");observer=new IntersectionObserver(onIntersection,{rootMargin:"50px 0px",threshold:.01}),e.forEach(e=>observer.observe(e))}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",mapLoaded&&self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),mapLoaded&&addMarkersToMap(),lazyLoadingObserver()}),createRestaurantHTML=(e=>{const t=document.createElement("li"),s=document.createElement("img");s.className="restaurant-img",s.setAttribute("src","");const r=LocalState.getImageUrlForRestaurant(e);/undefined/.test(r)?(s.setAttribute("data-src","/img/icons/icon-placeholder.png"),console.log("Image undefined!")):s.setAttribute("data-src",r),s.setAttribute("alt",`Restaurant ${e.name}`),t.append(s);const a=document.createElement("h3");a.innerHTML=e.name,t.append(a);const n=document.createElement("p");n.innerHTML=e.neighborhood,t.append(n);const o=document.createElement("p");o.innerHTML=e.address,t.append(o);const i=document.createElement("a");i.innerHTML="View Details",i.href=LocalState.getUrlForRestaurant(e),t.append(i);const c=document.createElement("img");return c.setAttribute("alt","Heart"),c.classList.add("favorize"),c.id=e.id,!0===e.is_favorite||"true"===e.is_favorite?(c.setAttribute("src","/img/icons/favorized.svg"),c.classList.add("favorized")):c.setAttribute("src","/img/icons/favorite.svg"),c.onclick=function(){this.classList.contains("favorized")?(this.src="/img/icons/favorite.svg",this.classList.remove("favorized"),LocalState.toggleFavorite(!1,this.id)):(this.src="/img/icons/favorized.svg",this.classList.add("favorized"),LocalState.toggleFavorite(!0,this.id))},t.append(c),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=LocalState.getMapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsicmVzdGF1cmFudHMiLCJuZWlnaGJvcmhvb2RzIiwiY3Vpc2luZXMiLCJtYXJrZXJzIiwib2JzZXJ2ZXIiLCJvbkludGVyc2VjdGlvbiIsImVudHJpZXMiLCJlbnRyeSIsImludGVyc2VjdGlvblJhdGlvIiwidW5vYnNlcnZlIiwidGFyZ2V0Iiwic2V0QXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwibmFtZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbml0TWFwIiwiZSIsIm1hcExvYWRlZCIsImZldGNoQ3Vpc2luZXMiLCJvYmplY3RfdHlwZSIsInJlZ2lzdGVyU2VydmljZVdvcmtlciIsInVwZGF0ZVJlc3RhdXJhbnRzIiwiY29uc29sZSIsInNlcnZpY2VXb3JrZXIiLCJuYXZpZ2F0b3IiLCJyZWdpc3RlciIsInRoZW4iLCJsb2ciLCJjYXRjaCIsImVyciIsImVycm9yIiwiTG9jYWxTdGF0ZSIsImdldE5laWdoYm9yaG9vZHMiLCJzZWxmIiwiZmlsbE5laWdoYm9yaG9vZHNIVE1MIiwib3B0aW9uIiwiaW5uZXJIVE1MIiwibmVpZ2hib3Job29kIiwiZm9yRWFjaCIsInNlbGVjdCIsImNyZWF0ZUVsZW1lbnQiLCJ2YWx1ZSIsImFwcGVuZCIsImZpbGxDdWlzaW5lc0hUTUwiLCJjdWlzaW5lIiwibGF0IiwiY2VudGVyIiwibG9jIiwiZ29vZ2xlIiwibWFwcyIsIk1hcCIsInNjcm9sbHdoZWVsIiwibWFwIiwiY1NlbGVjdCIsImNJbmRleCIsInNlbGVjdGVkSW5kZXgiLCJnZXRSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kIiwiZmlsbFJlc3RhdXJhbnRzSFRNTCIsImxhenlMb2FkaW5nT2JzZXJ2ZXIiLCJyZXN0YXVyYW50SW1hZ2VzIiwib2JzZXJ2ZXJDb25maWciLCJxdWVyeVNlbGVjdG9yQWxsIiwidGhyZXNob2xkIiwiaW1hZ2UiLCJvYnNlcnZlIiwidWwiLCJtIiwic2V0TWFwIiwicmVzdGF1cmFudCIsImNyZWF0ZVJlc3RhdXJhbnRIVE1MIiwiYWRkTWFya2Vyc1RvTWFwIiwiY2xhc3NOYW1lIiwiaW1hZ2VVcmwiLCJnZXRJbWFnZVVybEZvclJlc3RhdXJhbnQiLCJ0ZXN0IiwibGkiLCJhZGRyZXNzIiwibW9yZSIsImhyZWYiLCJnZXRVcmxGb3JSZXN0YXVyYW50IiwiZmF2b3JpemUiLCJjbGFzc0xpc3QiLCJpZCIsImFkZCIsImlzX2Zhdm9yaXRlIiwib25jbGljayIsInRoaXMiLCJyZW1vdmUiLCJ0b2dnbGVGYXZvcml0ZSIsIm1hcmtlciIsIndpbmRvdyIsImxvY2F0aW9uIiwiYWRkTGlzdGVuZXIiLCJ1cmwiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxZQUdKQyxjQUNBQyxTQUNJQyxJQUlKQyxTQUhJQSxXQUFKLEVBRElELFdBNklKLFNBQVNFLGVBQWVDLEdBR3BCQSxFQUFJQyxRQUFNQyxJQUFORCxFQUFNQyxrQkFBb0IsSUFFL0JKLFNBQVNLLFVBQVVGLEVBQU1HLFFBR3hCSCxFQUFNRyxPQUFPQyxhQUFhLGFBQzFCSixFQUFBRyxPQUFBQyxhQUFBLE1BQUFKLEVBQUFHLE9BQUFFLGFBQUEsZ0JBOUlGQyxTQUFNQyxpQkFERyxtQkFBQUMsSUFVVEMsU0FGREMsZUFBQSxPQUFBSCxpQkFBQSxRQUFBSSxTQUdBRixTQUFTQyxlQUFlLG1CQUFBSCxpQkFBd0JBLFNBQWlCSyxJQUM3REMsV0FBSEYsWUFEREYsU0FBU0MsZUFBZSx3QkFBd0JILGlCQUFpQixTQUFXSyxJQUk1RUMsV0FBQUYsWUFJQ0csV0FBQUEsaUJBbEJBUixLQUFNLGNBSVBTLFlBQUEsZUFjQ0QsQ0FBQUEsRUFBQUEsS0FDQUUsUUFBQUEsSUFBQUEsMEJBQ0FDLHFCQUxESCxnQkFsQkRFLHdCQXVCRUMsd0JBVUFELHNCQUFrQixNQUNsQkUsVUFBYUMsZUFDYkMsVUFKREQsY0FBQUUsU0FBQSx1QkFBQUMsS0FBQSxLQUZESixRQUFBSyxJQUFBLGlDQUlJ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dXJjZXNDb250ZW50IjpbImxldCByZXN0YXVyYW50cyxcclxuXHRuZWlnaGJvcmhvb2RzLFxyXG5cdGN1aXNpbmVzO1xyXG5sZXQgbWFwO1xyXG5sZXQgbWFwTG9hZGVkID0gZmFsc2U7XHJcbmxldCBtYXJrZXJzID0gW107XHJcbmxldCBvYnNlcnZlcjtcclxuXHJcblxyXG4vLyBSZWdpc3RlciBzZXJ2aWNlIHdvcmtlciBhbmQgZmV0Y2ggbmVpZ2hib3Job29kcyAmIGN1aXNpbmVzXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoZXZlbnQpID0+IHtcclxuXHJcblx0bGV0IGFwaSA9IHtcclxuXHRcdG5hbWU6ICdyZXN0YXVyYW50cycsXHJcblx0XHRvYmplY3RfdHlwZTogJ3Jlc3RhdXJhbnRzJ1xyXG5cdH07XHJcblxyXG5cdC8vIEF0dGFjaCBFdmVudEhhbmRsZXJzXHJcblx0Ly8gSW5pdGlhbGl6ZSBHb29nbGUgTWFwIG9uIGNsaWNrIG9yIGNoYW5nZSBmaWx0ZXJcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBpbml0TWFwKTtcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3Vpc2luZXMtc2VsZWN0JykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcclxuXHRcdGlmKCFtYXBMb2FkZWQpIGluaXRNYXAoKTtcclxuXHR9KTtcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmVpZ2hib3Job29kcy1zZWxlY3QnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xyXG5cdFx0aWYoIW1hcExvYWRlZCkgaW5pdE1hcCgpO1xyXG5cdH0pO1xyXG5cclxuXHQvLyBTdGFydCBsb2FkaW5nIGRhdGFcclxuXHRMb2NhbFN0YXRlLmNoZWNrZm9ySURCRGF0YShhcGksIChlcnJvciwgZGF0YSkgPT4ge1xyXG5cdFx0Y29uc29sZS5sb2coJ0luaXRpYWwgTG9hZCBmaW5pc2hlZCEnKTtcclxuXHRcdGZldGNoTmVpZ2hib3Job29kcygpO1xyXG5cdFx0ZmV0Y2hDdWlzaW5lcygpO1xyXG5cdFx0cmVnaXN0ZXJTZXJ2aWNlV29ya2VyKCk7XHJcblx0XHR1cGRhdGVSZXN0YXVyYW50cygpO1xyXG5cdH0pO1xyXG5cclxufSk7XHJcblxyXG4vLyBSZWdpc3RlciBzZXJ2aWNlIHdvcmtlclxyXG5yZWdpc3RlclNlcnZpY2VXb3JrZXIgPSAoKSA9PiB7XHJcblx0aWYoIW5hdmlnYXRvci5zZXJ2aWNlV29ya2VyKSByZXR1cm47XHJcblx0bmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoJy4vc2VydmljZS13b3JrZXIuanMnKS50aGVuKCAoKSA9PiB7XHJcblx0XHRjb25zb2xlLmxvZygnU2VydmljZSBXb3JrZXI6IFJlZ2lzdGVyZWQhJyk7XHJcblx0fSkuY2F0Y2goIChlcnIpID0+IHtcclxuXHRcdGNvbnNvbGUubG9nKGBTZXJ2aWNlIFdvcmtlcjogUmVnaXN0cmF0aW9uIGZhaWxlZDogJHtlcnJ9YCk7XHJcblx0fSk7XHJcbn07XHJcblxyXG4vLyBGZXRjaCBuZWlnaGJvcmhvb2RzIGFuZCBzZXQgdGhlaXIgSFRNTFxyXG5mZXRjaE5laWdoYm9yaG9vZHMgPSAoKSA9PiB7XHJcblx0TG9jYWxTdGF0ZS5nZXROZWlnaGJvcmhvb2RzKChlcnJvciwgbmVpZ2hib3Job29kcykgPT4ge1xyXG5cdFx0aWYgKGVycm9yKSB7IC8vIEdvdCBhbiBlcnJvclxyXG5cdFx0XHRjb25zb2xlLmVycm9yKGVycm9yKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHNlbGYubmVpZ2hib3Job29kcyA9IG5laWdoYm9yaG9vZHM7XHJcblx0XHRcdGZpbGxOZWlnaGJvcmhvb2RzSFRNTCgpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59O1xyXG5cclxuLy8gU2V0IG5laWdoYm9yaG9vZCBIVE1MXHJcbmZpbGxOZWlnaGJvcmhvb2RzSFRNTCA9IChuZWlnaGJvcmhvb2RzID0gc2VsZi5uZWlnaGJvcmhvb2RzKSA9PiB7XHJcblx0Y29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25laWdoYm9yaG9vZHMtc2VsZWN0Jyk7XHJcblx0bmVpZ2hib3Job29kcy5mb3JFYWNoKG5laWdoYm9yaG9vZCA9PiB7XHJcblx0XHRjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuXHRcdG9wdGlvbi5pbm5lckhUTUwgPSBuZWlnaGJvcmhvb2Q7XHJcblx0XHRvcHRpb24udmFsdWUgPSBuZWlnaGJvcmhvb2Q7XHJcblx0XHRzZWxlY3QuYXBwZW5kKG9wdGlvbik7XHJcblx0fSk7XHJcbn07XHJcblxyXG4vLyBGZXRjaCBzdWllaW5lcyBhbmQgc2V0IHRoZWlyIEhUTUxcclxuZmV0Y2hDdWlzaW5lcyA9ICgpID0+IHtcclxuXHRMb2NhbFN0YXRlLmdldEN1aXNpbmVzKChlcnJvciwgY3Vpc2luZXMpID0+IHtcclxuXHRcdGlmIChlcnJvcikgeyAvLyBHb3QgYW4gZXJyb3IhXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c2VsZi5jdWlzaW5lcyA9IGN1aXNpbmVzO1xyXG5cdFx0XHRmaWxsQ3Vpc2luZXNIVE1MKCk7XHJcblx0XHR9XHJcblx0fSk7XHJcbn07XHJcblxyXG4vLyBTZXQgY3Vpc2luZSBIVE1MXHJcbmZpbGxDdWlzaW5lc0hUTUwgPSAoY3Vpc2luZXMgPSBzZWxmLmN1aXNpbmVzKSA9PiB7XHJcblx0Y29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N1aXNpbmVzLXNlbGVjdCcpO1xyXG5cclxuXHRjdWlzaW5lcy5mb3JFYWNoKGN1aXNpbmUgPT4ge1xyXG5cdFx0Y29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcblx0XHRvcHRpb24uaW5uZXJIVE1MID0gY3Vpc2luZTtcclxuXHRcdG9wdGlvbi52YWx1ZSA9IGN1aXNpbmU7XHJcblx0XHRzZWxlY3QuYXBwZW5kKG9wdGlvbik7XHJcblx0fSk7XHJcbn07XHJcblxyXG4vLyBJbml0aWFsaXplIEdvb2dsZSBNYXBzLCBjYWxsZWQgZnJvbSBIVE1MLCB1cGRhdGUgcmVzdGF1cmFudHNcclxuaW5pdE1hcCA9ICgpID0+IHtcclxuXHRsZXQgbG9jID0ge1xyXG5cdFx0bGF0OiA0MC43MjIyMTYsXHJcblx0XHRsbmc6IC03My45ODc1MDFcclxuXHR9O1xyXG5cdHNlbGYubWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyksIHtcclxuXHRcdHpvb206IDEyLFxyXG5cdFx0Y2VudGVyOiBsb2MsXHJcblx0XHRzY3JvbGx3aGVlbDogZmFsc2VcclxuXHR9KTtcclxuXHQvLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwLXBsYWNlaG9sZGVyJykucmVtb3ZlKCk7XHJcblx0dXBkYXRlUmVzdGF1cmFudHMoKTtcclxuXHRtYXBMb2FkZWQgPSB0cnVlO1xyXG59O1xyXG5cclxuLy8gVXBkYXRlIHBhZ2UgYW5kIG1hcCBmb3IgY3VycmVudCByZXN0YXVyYW50c1xyXG51cGRhdGVSZXN0YXVyYW50cyA9ICgpID0+IHtcclxuXHRjb25zdCBjU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N1aXNpbmVzLXNlbGVjdCcpO1xyXG5cdGNvbnN0IG5TZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmVpZ2hib3Job29kcy1zZWxlY3QnKTtcclxuXHJcblx0Y29uc3QgY0luZGV4ID0gY1NlbGVjdC5zZWxlY3RlZEluZGV4O1xyXG5cdGNvbnN0IG5JbmRleCA9IG5TZWxlY3Quc2VsZWN0ZWRJbmRleDtcclxuXHJcblx0Y29uc3QgY3Vpc2luZSA9IGNTZWxlY3RbY0luZGV4XS52YWx1ZTtcclxuXHRjb25zdCBuZWlnaGJvcmhvb2QgPSBuU2VsZWN0W25JbmRleF0udmFsdWU7XHJcblxyXG5cdExvY2FsU3RhdGUuZ2V0UmVzdGF1cmFudEJ5Q3Vpc2luZUFuZE5laWdoYm9yaG9vZChjdWlzaW5lLCBuZWlnaGJvcmhvb2QsIChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuXHRcdGlmIChlcnJvcikgeyAvLyBHb3QgYW4gZXJyb3IhXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmVzZXRSZXN0YXVyYW50cyhyZXN0YXVyYW50cyk7XHJcblx0XHRcdGZpbGxSZXN0YXVyYW50c0hUTUwoKTtcclxuXHRcdH1cclxuXHR9KTtcclxufTtcclxuXHJcbi8vIEltYWdlIGxhenkgbG9hZGluZ1xyXG5cclxuLy8gQXR0YWNoIG9ic2VydmVyIGZvciBpbWFnZSBsYXp5IGxvYWRpbmdcclxubGF6eUxvYWRpbmdPYnNlcnZlciA9ICgpID0+IHtcclxuXHRjb25zdCByZXN0YXVyYW50SW1hZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnJlc3RhdXJhbnQtaW1nJyk7XHJcblx0Y29uc3Qgb2JzZXJ2ZXJDb25maWcgPSB7XHJcblx0XHRyb290TWFyZ2luOiAnNTBweCAwcHgnLFxyXG5cdFx0dGhyZXNob2xkOiAwLjAxXHJcblx0fTtcclxuXHRvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihvbkludGVyc2VjdGlvbiwgb2JzZXJ2ZXJDb25maWcpO1xyXG5cdHJlc3RhdXJhbnRJbWFnZXMuZm9yRWFjaCggaW1hZ2UgPT4gb2JzZXJ2ZXIub2JzZXJ2ZShpbWFnZSkpO1xyXG59O1xyXG5cclxuLy8gTGF6eSBsb2FkIGltYWdlcyBvbmNlIHJlc3Qgb2YgdGhlIHBhZ2UgaGFzIGZ1bGx5IGxvYWRlZFxyXG5mdW5jdGlvbiBvbkludGVyc2VjdGlvbihlbnRyaWVzKSB7XHJcblxyXG5cdGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XHJcblx0ICBcdGlmIChlbnRyeS5pbnRlcnNlY3Rpb25SYXRpbyA+IDApIHtcclxuXHJcblx0XHRcdG9ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpO1xyXG5cclxuXHRcdFx0aWYoZW50cnkudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1zcmMnKSkge1xyXG5cdFx0XHRcdGVudHJ5LnRhcmdldC5zZXRBdHRyaWJ1dGUoJ3NyYycsIGVudHJ5LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3JjJykpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSk7XHJcbiAgfVxyXG5cclxuXHJcbi8vIENsZWFyIGN1cnJlbnQgcmVzdGF1cmFudHMsIGZpbHRlciBhbmQgbWFwIG1hcmtlclxyXG5yZXNldFJlc3RhdXJhbnRzID0gKHJlc3RhdXJhbnRzKSA9PiB7XHJcblx0Ly8gUmVtb3ZlIGFsbCByZXN0YXVyYW50c1xyXG5cdHNlbGYucmVzdGF1cmFudHMgPSBbXTtcclxuXHRjb25zdCB1bCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN0YXVyYW50cy1saXN0Jyk7XHJcblx0dWwuaW5uZXJIVE1MID0gJyc7XHJcblxyXG5cdC8vIFJlbW92ZSBhbGwgbWFwIG1hcmtlcnNcclxuXHRpZihtYXBMb2FkZWQpIHNlbGYubWFya2Vycy5mb3JFYWNoKG0gPT4gbS5zZXRNYXAobnVsbCkpO1xyXG5cdHNlbGYubWFya2VycyA9IFtdO1xyXG5cdHNlbGYucmVzdGF1cmFudHMgPSByZXN0YXVyYW50cztcclxufTtcclxuXHJcbi8vIENyZWF0ZSBhbGwgcmVzdGF1cmFudCBIVE1MIGFuZCBtYXJrZXIgYW5kIGFkZCBpdCB0byB0aGUgcGFnZVxyXG5maWxsUmVzdGF1cmFudHNIVE1MID0gKHJlc3RhdXJhbnRzID0gc2VsZi5yZXN0YXVyYW50cykgPT4ge1xyXG5cdGNvbnN0IHVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnRzLWxpc3QnKTtcclxuXHRyZXN0YXVyYW50cy5mb3JFYWNoKHJlc3RhdXJhbnQgPT4ge1xyXG5cdFx0dWwuYXBwZW5kKGNyZWF0ZVJlc3RhdXJhbnRIVE1MKHJlc3RhdXJhbnQpKTtcclxuXHR9KTtcclxuXHRpZihtYXBMb2FkZWQpIGFkZE1hcmtlcnNUb01hcCgpO1xyXG5cdGxhenlMb2FkaW5nT2JzZXJ2ZXIoKTtcclxufTtcclxuXHJcbi8vIENyZWF0ZSByZXN0YXVyYW50IEhUTUxcclxuLy8gUGxhY2Vob2xkZXIgaW1hZ2UgZm9yIGltYWdlIGxhenkgbG9hZGluZ1xyXG5cclxuY3JlYXRlUmVzdGF1cmFudEhUTUwgPSAocmVzdGF1cmFudCkgPT4ge1xyXG5cdGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuXHJcblx0Y29uc3QgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuXHRpbWFnZS5jbGFzc05hbWUgPSAncmVzdGF1cmFudC1pbWcnO1xyXG5cdGltYWdlLnNldEF0dHJpYnV0ZSgnc3JjJywgJycpO1xyXG5cclxuXHQvLyBDaGVjayBpZiBpbWFnZSBleGlzdHNcclxuXHRjb25zdCBpbWFnZVVybCA9IExvY2FsU3RhdGUuZ2V0SW1hZ2VVcmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpO1xyXG5cdGNvbnN0IHJlZ2V4ID0gL3VuZGVmaW5lZC87XHJcblxyXG5cdGlmKCFyZWdleC50ZXN0KGltYWdlVXJsKSkge1xyXG5cdFx0aW1hZ2Uuc2V0QXR0cmlidXRlKCdkYXRhLXNyYycsIGltYWdlVXJsKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0aW1hZ2Uuc2V0QXR0cmlidXRlKCdkYXRhLXNyYycsICcvaW1nL2ljb25zL2ljb24tcGxhY2Vob2xkZXIucG5nJyk7XHJcblx0XHRjb25zb2xlLmxvZygnSW1hZ2UgdW5kZWZpbmVkIScpO1xyXG5cdH1cclxuXHRcclxuXHRpbWFnZS5zZXRBdHRyaWJ1dGUoJ2FsdCcsIGBSZXN0YXVyYW50ICR7cmVzdGF1cmFudC5uYW1lfWApO1xyXG5cdGxpLmFwcGVuZChpbWFnZSk7XHJcblxyXG5cdGNvbnN0IG5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMycpO1xyXG5cdG5hbWUuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uYW1lO1xyXG5cdGxpLmFwcGVuZChuYW1lKTtcclxuXHJcblx0Y29uc3QgbmVpZ2hib3Job29kID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cdG5laWdoYm9yaG9vZC5pbm5lckhUTUwgPSByZXN0YXVyYW50Lm5laWdoYm9yaG9vZDtcclxuXHRsaS5hcHBlbmQobmVpZ2hib3Job29kKTtcclxuXHJcblx0Y29uc3QgYWRkcmVzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuXHRhZGRyZXNzLmlubmVySFRNTCA9IHJlc3RhdXJhbnQuYWRkcmVzcztcclxuXHRsaS5hcHBlbmQoYWRkcmVzcyk7XHJcblxyXG5cdGNvbnN0IG1vcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcblx0bW9yZS5pbm5lckhUTUwgPSAnVmlldyBEZXRhaWxzJztcclxuXHRtb3JlLmhyZWYgPSBMb2NhbFN0YXRlLmdldFVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCk7XHJcblx0bGkuYXBwZW5kKG1vcmUpO1xyXG5cclxuXHQvLyBUb2dnbGUgZmF2b3JpemUgaWNvblxyXG5cdGNvbnN0IGZhdm9yaXplID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcblx0ZmF2b3JpemUuc2V0QXR0cmlidXRlKCdhbHQnLCAnSGVhcnQnKTtcclxuXHRmYXZvcml6ZS5jbGFzc0xpc3QuYWRkKCdmYXZvcml6ZScpO1xyXG5cdGZhdm9yaXplLmlkID0gcmVzdGF1cmFudC5pZDtcclxuXHJcblx0aWYocmVzdGF1cmFudC5pc19mYXZvcml0ZSA9PT0gdHJ1ZSB8fCByZXN0YXVyYW50LmlzX2Zhdm9yaXRlID09PSAndHJ1ZScpe1xyXG5cdFx0ZmF2b3JpemUuc2V0QXR0cmlidXRlKCdzcmMnLCAnL2ltZy9pY29ucy9mYXZvcml6ZWQuc3ZnJyk7IC8vIFRPRE86IEZpeCBidWcgb24gbG9hZCB3aXRoIHdyb25nIGNsYXNzXHJcblx0XHRmYXZvcml6ZS5jbGFzc0xpc3QuYWRkKCdmYXZvcml6ZWQnKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0ZmF2b3JpemUuc2V0QXR0cmlidXRlKCdzcmMnLCAnL2ltZy9pY29ucy9mYXZvcml0ZS5zdmcnKTtcclxuXHR9XHJcblxyXG5cdGZhdm9yaXplLm9uY2xpY2sgPSBmdW5jdGlvbiB0b2dnbGVGYXZvcml0ZSgpIHtcclxuXHRcdFxyXG5cdFx0aWYodGhpcy5jbGFzc0xpc3QuY29udGFpbnMoJ2Zhdm9yaXplZCcpKSB7XHJcblx0XHRcdHRoaXMuc3JjID0gJy9pbWcvaWNvbnMvZmF2b3JpdGUuc3ZnJztcclxuXHRcdFx0dGhpcy5jbGFzc0xpc3QucmVtb3ZlKCdmYXZvcml6ZWQnKTtcclxuXHRcdFx0TG9jYWxTdGF0ZS50b2dnbGVGYXZvcml0ZShmYWxzZSwgdGhpcy5pZCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLnNyYyA9ICcvaW1nL2ljb25zL2Zhdm9yaXplZC5zdmcnO1xyXG5cdFx0XHR0aGlzLmNsYXNzTGlzdC5hZGQoJ2Zhdm9yaXplZCcpO1xyXG5cdFx0XHRMb2NhbFN0YXRlLnRvZ2dsZUZhdm9yaXRlKHRydWUsIHRoaXMuaWQpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdGxpLmFwcGVuZChmYXZvcml6ZSk7XHJcblx0XHJcblx0cmV0dXJuIGxpO1xyXG59O1xyXG5cclxuLy8gQWRkIG1hcmtlcnMgZm9yIGN1cnJlbnQgcmVzdGF1cmFudHMgdG8gdGhlIG1hcFxyXG5hZGRNYXJrZXJzVG9NYXAgPSAocmVzdGF1cmFudHMgPSBzZWxmLnJlc3RhdXJhbnRzKSA9PiB7XHJcblx0cmVzdGF1cmFudHMuZm9yRWFjaChyZXN0YXVyYW50ID0+IHtcclxuXHRcdC8vIEFkZCBtYXJrZXIgdG8gdGhlIG1hcFxyXG5cdFx0Y29uc3QgbWFya2VyID0gTG9jYWxTdGF0ZS5nZXRNYXBNYXJrZXJGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQsIHNlbGYubWFwKTtcclxuXHRcdGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgKCkgPT4ge1xyXG5cdFx0XHR3aW5kb3cubG9jYXRpb24uaHJlZiA9IG1hcmtlci51cmw7XHJcblx0XHR9KTtcclxuXHRcdHNlbGYubWFya2Vycy5wdXNoKG1hcmtlcik7XHJcblx0fSk7XHJcblxyXG59O1xyXG4iXX0=
