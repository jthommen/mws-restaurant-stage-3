class ApiService{static fetchApiData(e,t){if(!navigator.onLine&&("favorize"===e.name||"addReview"===e.name))return void LocalState.sendDataWhenOnline(e);let a,o;switch(e.name){case"restaurants":a="http://localhost:1337/restaurants",o={method:"GET"};break;case"restaurantById":a=`http://localhost:1337/restaurants/${e.object_id}`,o={method:"GET"};case"reviews":a="http://localhost:1337/reviews",o={method:"GET"};break;case"reviewById":a=`http://localhost:1337/reviews/?restaurant_id=${e.object_id}`,o={method:"GET"};break;case"addReview":a="http://localhost:1337/reviews";let t={name:e.data[0],rating:parseInt(e.data[1]),comments:e.data[2],restaurant_id:parseInt(e.data[3])};o={method:"POST",body:JSON.stringify(t),headers:new Headers({"Content-Type":"application/json"})};break;case"favorize":a=`http://localhost:1337/restaurants/${e.object_id}/?is_favorite=${e.data}`,o={method:"PUT"}}fetch(a,o).then(t=>{console.log(`Server: ${e.name} api called`);const a=t.headers.get("content-type");return a&&-1!==a.indexOf("application/json")?t.json():"API call successfull"}).then(e=>{t(null,e)}).catch(e=>t(e,null))}}class LocalState{static setupIDBStores(e){switch(e){case"restaurants":return idb.open("restaurants",1,e=>{e.createObjectStore("restaurants",{keyPath:"id"})});case"reviews":return idb.open("reviews",1,e=>{e.createObjectStore("reviews",{keyPath:"id"}).createIndex("by-restaurantId","restaurant_id")})}}static checkforIDBData(e,t){LocalState.setupIDBStores(e.object_type).then(t=>{return t.transaction(e.object_type).objectStore(e.object_type).getAll()}).then(a=>{if(a.length>0){console.log(`IDB: ${e.name} retrieved:`,a),t(null,a);let o=localStorage.getItem("dataRefreshed");(!o||(o-new Date)/1e3>300)&&(localStorage.setItem("dataRefreshed",new Date),ApiService.fetchApiData(e,(t,a)=>{let o=new Worker("js/worker.js"),r={api:e.name,objects:a};o.postMessage(r),o.onmessage=(e=>console.log(e.data))}))}else console.log(`IDB: No ${e.name} found`),ApiService.fetchApiData(e,(a,o)=>{LocalState.setupIDBStores(e.object_type).then(t=>{let a=t.transaction(e.object_type,"readwrite").objectStore(e.object_type);return o.forEach(e=>{a.put(e)}),console.log("IDB: Data stored: ",o),o}).then(e=>t(null,e))})})}static updateIDBData(e,t){let a=LocalState.setupIDBStores(e.object_type);a.then(t=>{return t.transaction(e.object_type).objectStore(e.object_type).get(e.object_id)}).then(o=>{o.is_favorite=e.data,a.then(t=>{t.transaction(e.object_type,"readwrite").objectStore(e.object_type).put(o)}).then(()=>t(null,`IDB: ${o.name} favorized!`))})}static sendDataWhenOnline(e){console.log(e),localStorage.setItem("data",JSON.stringify(e.data)),console.log(`Local Storage: ${e.object_type} stored`),window.addEventListener("online",t=>{let a=JSON.parse(localStorage.getItem("data"));null!==a&&(console.log(a),ApiService.fetchApiData(e,(e,t)=>{e?console.log(e):console.log(t)}),console.log("LocalState: data sent to api"),localStorage.removeItem("data"),console.log(`Local Storage: ${e.object_type} removed`)),console.log("Browser: Online again!")})}static getRestaurantById(e,t){let a={name:"restaurantById",object_type:"restaurants",object_id:e};LocalState.checkforIDBData(a,(a,o)=>{if(a)t(a,null);else{const a=o.find(t=>t.id==e);a?t(null,a):t("Restaurant does not exist",null)}})}static getRestaurantByCuisine(e,t){LocalState.checkforIDBData({name:"restaurants",object_type:"restaurants"},(a,o)=>{if(a)t(a,null);else{const a=o.filter(t=>t.cuisine_type==e);t(null,a)}})}static getRestaurantByNeighborhood(e,t){LocalState.checkforIDBData({name:"restaurants",object_type:"restaurants"},(a,o)=>{if(a)t(a,null);else{const a=o.filter(t=>t.neighborhood==e);t(null,a)}})}static getRestaurantByCuisineAndNeighborhood(e,t,a){LocalState.checkforIDBData({name:"restaurants",object_type:"restaurants"},(o,r)=>{if(o)a(o,null);else{let o=r;"all"!==e&&(o=o.filter(t=>t.cuisine_type===e)),"all"!=t&&(o=o.filter(e=>e.neighborhood===t)),a(null,o)}})}static getNeighborhoods(e){LocalState.checkforIDBData({name:"restaurants",object_type:"restaurants"},(t,a)=>{if(t)e(t,null);else{const t=a.map((e,t)=>a[t].neighborhood),o=t.filter((e,a)=>t.indexOf(e)==a);e(null,o)}})}static getCuisines(e){LocalState.checkforIDBData({name:"restaurants",object_type:"restaurants"},(t,a)=>{if(t)e(t,null);else{const t=a.map((e,t)=>a[t].cuisine_type),o=t.filter((e,a)=>t.indexOf(e)==a);e(null,o)}})}static getReviewsByRestaurant(e,t){let a={name:"reviewById",object_type:"reviews",object_id:e};LocalState.checkforIDBData(a,(a,o)=>{if(a)t(null,a);else{const a=o.filter(t=>t.restaurant_id===e);t(null,a)}})}static getUrlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static getImageUrlForRestaurant(e){return`/img/${e.photograph}.jpg`}static getMapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:LocalState.getUrlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static toggleFavorite(e,t){let a={name:"favorize",object_type:"restaurants",object_id:t=parseInt(t),data:e};LocalState.updateIDBData(a,(e,t)=>{e&&console.log(e)}),ApiService.fetchApiData(a,(e,t)=>{e?console.log(e):console.log(`Server: ${t.name} updated`)})}static addReview(e){let t={name:"addReview",data:e,object_type:"review"};ApiService.fetchApiData(t,(e,t)=>{e?console.log(e):console.log("Server: Review uploaded")})}}